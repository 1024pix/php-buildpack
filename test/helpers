#!/usr/bin/env bash

### Helpers functions

test::helpers::test_deploy() {
    # Deploy a PHP app in a Scalingo runtime and test that everything is as
    # expected. The different fixtures allow us to test different setup and
    # conditions.

    local fixture_name="${1}"
    local detect_expectation="${2}"
    local version="${3}"

    # Setup the fixture:
    test::utils::setupFixture "${fixture_name}"

    # Test that bin/detect works as expected:
    test::utils::detect
    test::utils::assertCapturedSuccess
    test::utils::assertCapturedEquals "${detect_expectation}"

    # Test that bin/compile works as expected:
    test::utils::compile
    # We can't use assertCapturedSuccess here:
    # With an empty composer.json file, composer will use stderr to warn us
    # that nothing had to be installed, causing the test to fail for no
    # reason -_-
    test::utils::assertSuccess

    # Switch environment:
    test::helpers::enter_prod

    # Test that PHP has the awaited version:
    test::helpers::get_php_version
    test::utils::assertCapturedStartswith "PHP ${version}"

    # Test that all default PHP modules are available:
    test::helpers::list_php_modules
    for module in "${default_modules[@]}"; do
        test::utils::assertFileContains "${module}" "${STD_OUT}"
    done
}

test::helpers::get_php_version() {
    # Captures the output of `php --version` so we can check that the version
    # installed is the expected one.

    test::utils::capture ./vendor/php/bin/php --version
}

test::helpers::list_php_modules() {
    # Captures the output of `php --modules` so we can check that all default
    # modules are indeed available.

    test::utils::capture ./vendor/php/bin/php --modules
}

test::helpers::enter_prod() {
    # Helper to switch to a production-like environment:
    # - $HOME is set to /app
    # - Working directory is set to $HOME
    # - The result of the `compile` script is copied to $HOME
    #
    # This environment is automatically reverted back, thanks to the `tearDown`
    # function override in `test/run`.
    # It would have been nice to put that in a `setUp` override. Unfortunately,
    # we can't because the switch of environment should only happen **during**
    # the test (after several steps have been reached), not before.
    #
    # /!\ This function is meant to be called after a successful call to
    #     to `test::utils::compile` to further test the result of the
    #     bin/compile call. It makes no sense to call it in another context.

    PREV_HOME="${HOME}"
    export PREV_HOME

    HOME="/app"
    export HOME

    pushd "${HOME}" > /dev/null

    cp --archive --recursive "${BUILD_DIR}"/* "${HOME}/"
}
