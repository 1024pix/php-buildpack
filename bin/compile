#!/bin/bash

set -e
shopt -s dotglob

basedir="$( cd -P "$( dirname "$0" )" && pwd )"

source "$basedir/../conf/buildpack.conf"

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

BUILD_DIR="$1"
CACHE_DIR="$2"

cd "$BUILD_DIR"
mkdir -p "$CACHE_DIR/package"

function fetch_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    mkdir -p "$location"

    local package="${engine}-${version}"
    local checksum_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.md5"
    local package_url="http://${S3_BUCKET}.s3.amazonaws.com/package/${package}.tgz"
    local checksum=$(curl "$checksum_url" 2> /dev/null)
    local cache_checksum=

    if [ -f "$CACHE_DIR/package/${package}.md5" ]; then
        local cache_checksum=$(cat "$CACHE_DIR/package/${package}.md5")
    fi

    if [ "$cache_checksum" != "$checksum" ]; then
        curl "$package_url" -L -s -o - > "$CACHE_DIR/package/${package}.tgz"
        echo "$checksum" > "$CACHE_DIR/package/${package}.md5"
    else
        echo "Checksums match. Fetching from cache." | indent
    fi

    tar xzf "$CACHE_DIR/package/${package}.tgz" -C "$location"
}

function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    if [ ! -f "$target/composer.json" ]; then
        return 0
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    echo "-----> Vendoring Composer"
    if [ -f "$CACHE_DIR/composer.phar" ]; then
        {
            "$BUILD_DIR/vendor/php/bin/php" "$CACHE_DIR/composer.phar" self-update
        } | indent
    else
        {
            curl -L "http://getcomposer.org/composer.phar" > "$CACHE_DIR/composer.phar"
            chmod a+x "$CACHE_DIR/composer.phar"
        } | indent
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    echo "-----> Installing application dependencies with Composer"
    {
        cd "$target"
        "$BUILD_DIR/vendor/php/bin/php" \
            "$target/vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            --no-dev

        cd "$cwd"
    } | indent
}

function mktmpdir() {
    dir=$(mktemp -t php-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

function install_newrelic() {
    echo "-----> Enabling Newrelic support"

    local php_api_version=$(basename "$(php-config --extension-dir)" | tr '-' ' ' | cut -f 5 -d ' ')
    local version="$1"
    local license="$2"
    local cwd=$(pwd)
    local ext_dir=$(php-config --extension-dir)
    local tempdir=$(mktmpdir "newrelic")
    cd "$tempdir"

    curl --silent -L "http://download.newrelic.com/php_agent/archive/${version}/newrelic-php5-${version}-linux.tar.gz" | tar xz
    cd "newrelic-php5-${version}-linux"
    cp -f "agent/x64/newrelic-${php_api_version}.so" "${ext_dir}/newrelic.so"

    echo "extension=newrelic.so" > /app/vendor/php/etc/conf.d/newrelic.ini
    echo "newrelic.license=$license" >> /app/vendor/php/etc/conf.d/newrelic.ini

    cd "$cwd"
}

function package_document_root() {
    local doc_root=$(jq --raw-output '.extra.heroku["document-root"] // ""' < "$BUILD_DIR/composer.json")
    echo "/app/$doc_root"
}

function package_index_file() {
    jq --raw-output '.extra.heroku["index-document"] // "index.php"' < "$BUILD_DIR/composer.json"
}

function package_framework() {
    jq --raw-output '.extra.heroku.framework // ""' < "$BUILD_DIR/composer.json"
}

function package_nginx_version() {
    jq --raw-output ".extra.heroku.engines.nginx // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_version() {
    jq --raw-output ".extra.heroku.engines.php // \"default\"" < "$BUILD_DIR/composer.json"
}

function package_php_config() {
    jq --raw-output '.extra.heroku["php-config"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_nginx_includes() {
    jq --raw-output '.extra.heroku["nginx-includes"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output '.extra.heroku["compile"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_newrelic_license() {
    jq --raw-output '.extra.heroku["newrelic"] // ""' < "$BUILD_DIR/composer.json"
}

# Download jq binary for JSON processing
export PATH="$HOME/bin:$PATH"
curl "http://stedolan.github.com/jq/download/linux64/jq" -L -s -o - > "$HOME/bin/jq"
chmod +x "$HOME/bin/jq"

DEFAULT_PHP="5.5.3"
DEFAULT_NGINX="1.4.2"

AVAILABLE_PHP_VERSIONS=$(curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.php" 2> /dev/null)
AVAILABLE_NGINX_VERSIONS=$(curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.nginx" 2> /dev/null)

PHP_VERSION="default"
NGINX_VERSION="default"
DOCUMENT_ROOT="/app"
INDEX_DOCUMENT="index.php"
FRAMEWORK=
PHP_EXTRA_CONFIG=
COMPILE_CMD=
NGINX_INCLUDES=
NEWRELIC_LICENSE=
NEWRELIC_VERSION=4.0.5.18

# Read config variables from composer.json if it exists
if [ -f "$BUILD_DIR/composer.json" ]; then
    PHP_VERSION=$(package_php_version)
    NGINX_VERSION=$(package_nginx_version)
    DOCUMENT_ROOT=$(package_document_root)
    INDEX_DOCUMENT=$(package_index_file)
    FRAMEWORK=$(package_framework)
    PHP_EXTRA_CONFIG=$(package_php_config)
    COMPILE_CMD=$(package_compile_cmd)
    NGINX_INCLUDES=$(package_nginx_includes)
    NEWRELIC_LICENSE=$(package_newrelic_license)
fi

if [ "$PHP_VERSION" = "default" ]; then
    PHP_VERSION="$DEFAULT_PHP"
fi

if [ "$NGINX_VERSION" = "default" ]; then
    NGINX_VERSION="$DEFAULT_NGINX"
fi

# Look for ".*" versions, match them against all available versions
# and select the latest version which was found.
if echo "$PHP_VERSION" | grep '\*' &>/dev/null; then
    PHP_VERSION=$(echo "$AVAILABLE_PHP_VERSIONS" | grep "^$PHP_VERSION$" | sort -r | head -n1)
fi

if echo "$NGINX_VERSION" | grep '\*' &>/dev/null; then
    NGINX_VERSION=$(echo "$AVAILABLE_NGINX_VERSIONS" | grep "^$NGINX_VERSION$" | sort -r | head -n1)
fi

VENDORED_NGINX=$(mktmpdir nginx)
VENDORED_PHP=$(mktmpdir php)

echo "-----> Bundling NGINX ${NGINX_VERSION}"
fetch_package nginx "$NGINX_VERSION" "$VENDORED_NGINX"

echo "-----> Bundling PHP ${PHP_VERSION}"
fetch_package php "$PHP_VERSION" "$VENDORED_PHP"

echo "-----> Vendoring binaries into slug"
[ ! -d "$BUILD_DIR/vendor" ] && mkdir -p "$BUILD_DIR/vendor"
cp -R "$VENDORED_NGINX/" "vendor/nginx"
cp -R "$VENDORED_PHP/" "vendor/php"

export PATH=$BUILD_DIR/vendor/nginx/sbin:$BUILD_DIR/vendor/php/bin:$BUILD_DIR/vendor/php/sbin:$PATH

# Install Newrelic addon
if [ -n "$NEWRELIC_LICENSE" ]; then
    install_newrelic "$NEWRELIC_VERSION" "$NEWRELIC_LICENSE"
fi

# Test that all packages were fetched and extracted successfully
test -d "vendor/nginx"
test -d "vendor/php"

if [ -n "$BUILDPACK_DEBUG" ]; then
    ls -R vendor/nginx
    ls -R vendor/php
fi

mkdir -p "conf"
cp "$basedir/../conf/nginx/base.conf.erb" "conf/nginx.conf.erb"
cp "$basedir/../conf/php/php-fpm.conf" "vendor/php/etc/php-fpm.conf"
cp "$basedir/../conf/php/php.ini" "vendor/php/etc/php.ini"

for conf in $PHP_EXTRA_CONFIG; do
    echo "$conf" >> "vendor/php/etc/php.ini"
done

for f in "$basedir/../frameworks/"*; do
    if "$f" detect "$BUILD_DIR"; then
        FRAMEWORK="$f"
    fi
done

# Fall back to classic mode
if [ -z "$FRAMEWORK" ]; then
    FRAMEWORK="$basedir/../frameworks/default"
fi

if [ ! -f "$FRAMEWORK" ] && [ -f "$basedir/../frameworks/$FRAMEWORK" ]; then
    FRAMEWORK="$basedir/../frameworks/$FRAMEWORK"
fi

if [ -n "$FRAMEWORK" ] && [ -f "$FRAMEWORK" ]; then
    "$FRAMEWORK" compile "$BUILD_DIR" "$CACHE_DIR"
fi

test ! -d ".profile.d" && mkdir -p .profile.d || true

cat > ".profile.d/php.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/app/bin:/app/vendor/nginx/sbin:/app/vendor/php/sbin:/app/vendor/php/bin:/app/vendor/bin:\$PATH
SH

install_composer_deps "$BUILD_DIR"

if [ -n "$COMPILE_CMD" ]; then
    echo "-----> Running compile commands"
    for cmd in "$COMPILE_CMD"; do
        {
            echo "Running '$cmd'"
            eval "$cmd"
        } | indent
    done
fi

mkdir -p "bin"

cat > "bin/run" <<SH
#!/usr/bin/env bash

for var in \`env | cut -f1 -d=\`; do
    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

export DOCUMENT_ROOT="$DOCUMENT_ROOT"
export INDEX_DOCUMENT="$INDEX_DOCUMENT"
export NGINX_INCLUDES="$NGINX_INCLUDES"

erb conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf
erb conf/site.conf.erb > /app/vendor/nginx/conf/site.conf

mkdir -p /app/vendor/nginx/logs
mkdir -p /app/vendor/php/var/log
mkdir -p /app/vendor/php/run

touch /app/vendor/nginx/logs/access.log \
      /app/vendor/nginx/logs/error.log

touch /app/vendor/php/var/log/error.log

(tail -qF -n 0 /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/*.log &)

php-fpm -p "/app/vendor/php"
nginx -p "/app/vendor/nginx" -c /app/vendor/nginx/conf/nginx.conf
SH

chmod a+x "bin/run"
